# 
# YAML Serpentine config file (generated from template).
# This is used by the sconfig.py script to generate a starting configuration.
#

global:
        app_root:                       /Users/dtaylor/workshop/python/bifrost
        static_file_path:               /Users/dtaylor/workshop/python/bifrost/templates
        default_forms_package:          bifrost_forms
        default_model_package:          bifrost_models
        default_controller_package:     bifrost_controllers 
        startup_db:                     localhost.avalon_mmf
        url_base:                       bifrost
#        
# Each entry in the content registry under 'frames' is a frame ID.
# The 'type' is either html or xml; specification is optional, it's only
# consulted if the registry can't guess the type from the filename.
#
content_registry:
    template_path: templates
    frames:
        
            an2insert_point_list:
                   template:   bootstrap/index_an2insert_point.html
                   form:       An2InsertPointForm
                   type:       html
        
            an2insert_point_update:
                   template:   bootstrap/update_an2insert_point.html
                   form:       An2InsertPointForm
                   type:       html
        
            clip_insert:
                   template:   bootstrap/insert_clip.html
                   form:       ClipForm
                   type:       html
        
            clip_list:
                   template:   bootstrap/index_clip.html
                   form:       ClipForm
                   type:       html
        
            edl_update:
                   template:   bootstrap/update_edl.html
                   form:       EdlForm
                   type:       html
        
            schedule_list:
                   template:   bootstrap/index_schedule.html
                   form:       ScheduleForm
                   type:       html
        
            asset_insert:
                   template:   bootstrap/insert_asset.html
                   form:       AssetForm
                   type:       html
        
            an2insert_point_insert:
                   template:   bootstrap/insert_an2insert_point.html
                   form:       An2InsertPointForm
                   type:       html
        
            edl_list:
                   template:   bootstrap/index_edl.html
                   form:       EdlForm
                   type:       html
        
            schedule_insert:
                   template:   bootstrap/insert_schedule.html
                   form:       ScheduleForm
                   type:       html
        
            edl_insert:
                   template:   bootstrap/insert_edl.html
                   form:       EdlForm
                   type:       html
        
            asset_update:
                   template:   bootstrap/update_asset.html
                   form:       AssetForm
                   type:       html
        
            asset_list:
                   template:   bootstrap/index_asset.html
                   form:       AssetForm
                   type:       html
        
            schedule_update:
                   template:   bootstrap/update_schedule.html
                   form:       ScheduleForm
                   type:       html
        
            clip_update:
                   template:   bootstrap/update_clip.html
                   form:       ClipForm
                   type:       html
        

#
# Each entry in the models section represents the mapping between a Model and its
# database table.  The optional "children" entry under each model consists of 1 to N model names
# separated by a comma.
#
models:
        
        Clip:
              table:      clips
              children:   

        
        An2Insert_point:
              table:      an2_insert_points
              children:   

        
        Asset:
              table:      assets
              children:   

        
        Edl:
              table:      edls
              children:   

        
        Schedule:
              table:      schedules
              children:   

        

#
# Each entry in the controllers section is the class name of a controller
# (relative to the package name specified in the global setting 'default_controller_package')
# followed by its alias, model class, and form class.
#
# The default package resolution behavior is overridden by specifying a fully qualified package name
# for the controller, i.e. my.package.ControllerClass.
#
# A controller's alias is expected to match the unqualified class name of the Model it controls;
# the entry WidgetController: Widget sets the controller's alias *and* links it to the 
# <default_dbtypes_package>.Widget class. To override this behavior, specify the target classname
# in the optional "model" attribute.
#
#
controllers:
        
        EdlController:
            alias:      Edl
            model:      Edl

        
        ScheduleController:
            alias:      Schedule
            model:      Schedule

        
        An2Insert_pointController:
            alias:      An2Insert_point
            model:      An2Insert_point

        
        ClipController:
            alias:      Clip
            model:      Clip

        
        AssetController:
            alias:      Asset
            model:      Asset

        


# TODO: alter program logic so that the ViewManager will infer the proper frame
# from the name of the controller and method.
view_manager:
        controllers:  
            
            Edl:
                
                - method:       index
                  frame:        edl_list                
                
                - method:       insert
                  frame:        edl_insert                
                
                - method:       update
                  frame:        edl_update                
                
            
            Schedule:
                
                - method:       index
                  frame:        schedule_list                
                
                - method:       insert
                  frame:        schedule_insert                
                
                - method:       update
                  frame:        schedule_update                
                
            
            An2Insert_point:
                
                - method:       index
                  frame:        an2insert_point_list                
                
                - method:       insert
                  frame:        an2insert_point_insert                
                
                - method:       update
                  frame:        an2insert_point_update                
                
            
            Clip:
                
                - method:       index
                  frame:        clip_list                
                
                - method:       insert
                  frame:        clip_insert                
                
                - method:       update
                  frame:        clip_update                
                
            
            Asset:
                
                - method:       index
                  frame:        asset_list                
                
                - method:       insert
                  frame:        asset_insert                
                
                - method:       update
                  frame:        asset_update                
                
            
 

# Each entry under the frames: heading is a frame alias (previously registered with the 
# ContentManager) with a corresponding reference to an XSL stylesheet. The referenced frame
# should be of type XMLFrame.
# TODO: alter the program logic so that by default we don't need any entries here;
# DisplayManager will auto-guess the stylesheet name based on the frame's name.
# The stylesheet_path is relative to the global property base_dir.

display_manager:
        stylesheet_path: stylesheets
        frames:    
            



# We can configure multiple databases. Each named database will result
# in the creation of a PersistenceManager instance.
# At application startup, the Environment object with contain
# the PersistenceManager designated in the global setting
# 'startup_db'.
databases:   
        
        
        localhost.avalon_mmf:
            type:           mysql
            host:           localhost
            schema:         avalon_mmf
            username:       dtaylor
            password:       notobvious
                                 



                        